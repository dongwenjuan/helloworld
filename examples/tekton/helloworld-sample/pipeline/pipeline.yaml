apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: github-push-pipeline
spec:
  description: |
    github-push-pipeline takes a git repository and a commit SHA
    and validates that cloning the revision succeeds. This is an example
    Pipeline demonstrating the following:
      - Using the git-clone catalog Task to clone a specific commit
      - Passing a cloned repo to subsequent Tasks using a Workspace.
      - Ordering Tasks in a Pipeline using "runAfter" so that
        git-clone completes before we try to read from the Workspace.
      - Using a volumeClaimTemplate Volume as a Workspace.
      - Avoiding hard-coded paths by using a Workspace's path
        variable instead.
  params:
  - name: repo-url
    type: string
    description: The git repository URL to clone from.
  - name: commit
    type: string
    description: The git commit to fetch.
  - name: user-home
    type: string
    description: The home directory of the user performing the git clone.
    default: "/tekton/home"
  - name: user-uid
    type: string
    description: The UID of the user performing the git clone.
    default: "0"
  - name: image
    type: string
    description: The image name which will build
  - name: insecure_registry
    type: string
    description: The image registry
  workspaces:
  - name: shared-data
    description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task for the commit to be checked.
  tasks:
  - name: fetch-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: $(params.repo-url)
    - name: revision
      value: $(params.commit)
    - name: userHome
      value: $(params.user-home)
    - name: deleteExisting
      value: "false"
    - name: subdirectory
      value: $(params.source-revision) 
  - name: run-test
    taskRef:
      name: golang-test
    runAfter:
      - check-expectations
    workspaces:
      - name: source
        workspace: shared-data
    params:
      - name: package
        value:       github.com/chmouel/go-rest-api-test
  - name: image-build-and-push
    taskRef:
      name: docker-build
    runAfter:
    - run-test
    workspaces:
    - name: source
      workspace: shared-data
    params:
    - name: image
      value: $(params.image)
    - name: insecure_registry
      value: $(params.insecure_registry)
  - name: fetch-deployment-repository
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: $(params.deployment-repo-url)
    - name: revision
      value: $(params.deployment-revision)
    - name: subdirectory
      value: $(params.source-revision)-deployment
    - name: deleteExisting
      value: "true"
    runAfter:
      - image-build-and-push
